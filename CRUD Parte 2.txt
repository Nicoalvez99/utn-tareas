En el archivo models/novedades Model.js agregaremos la función necesaria para
eliminar la novedad según el id.

async function deleteNovedadById(id) {
	var query = "delete from novedades where id = ? ";
	var rows = await pool.query(query, [id]);
	return rows;
}

module.exports = { getNovedades, deleteNovedadById }

En el archivo routes/admin/novedades. agregaremos el controlador que será el
encargado de capturar las rutas de eliminación y llamará a la función que acabamos
de crear en el modelo, pasando como parámetro el valor que reciba por url.

router.get('/eliminar/:id', async (req, res, next) => {
	var id = req.params.id;
	await novedadesModel.deleteNovedadById(id);
	res.redirect('/admin/novedades')
});

Modificamos nuestro archivo views/admin/novedades.hbs e incluimos un link a
nuestro nuevo controlador de eliminar.

<a href="/admin/novedades/eliminar/{{id}}" class="btn btn-secondary">Eliminar</a>

Modificamos nuestro archivo views/admin/novedades.hbs e incluimos un link a la
ruta de modificar.

href="/admin/novedades/modificar/{{id}}"

En el archivo models/novedades Model.js agregaremos dos funciones nuevas. Una
nos permitirá obtener una noticia única de la base de datos utilizando el id de la
misma para seleccionarla. La otra será la encargada de modificar los campos de la
novedad que seleccionemos por id y que reciba como parámetro.


async function getNovedadById(id) {
	var query = "select * from novedades where id = ? ";
	var rows = await pool.query(query, [id]);
	return rows[0];
}

async function modificarNovedadById(obj, id) {
	try {
		var query = "update novedades set ? where id=?";
		var rows = await pool.query(query, [obj, id]);
		return rows;
	} catch (error) {
		throw error;
	}
}

module.exports = agregar getNovedadById y modificarNovedadById

En el archivo routes/admin/novedades.js creamos el controlador de ruta
necesario para imprimir el formulario de modificación.

router.get('/modificar/:id', async (req, res, next) => {
	let id = req.params.id;
	let novedad = await novedadModel.getNovedadById(id);
	res.render('admin/modificar', {
		layout: 'admin/layout',
		novedad
	});
});



Creamos la vista views/admin/modificar.hbs donde armaremos el formulario para
modificar. Este es muy similar al de agregar, con la salvedad de que los valores de
los campos vienen predefinidos por los campos de la novedad que trajimos de la
base de datos.


(ver directo en el pdf) p.11



En el archivo routes/admin/novedades.js creamos el controlador encargado de
recibir los datos del formulario y pasarlos a la función de model para efectuar la
modificación de la novedad en la base de datos

router.post('/modificar', async (req, res, next) => {
	try {
		let obj = {
			titulo: req.body.titulo,
			subtitulo: req.body.subtitulo,
			cuerpo: req.body.cuerpo
		}
	await novedadesModel.modificarNovedadesById(obj, req.body.id);
	res.redirect('/admin/novedades');
	} catch (error) {
		res.render('admin/modificar', {
			layout: 'admin/layout',
			error: true, message: 'No se modifico la novedad'
		});
	}
});



En el archivo views/admin/modificar.hbs agregamos el if para que imprima el
error en caso de haber uno.


{{#if error}}
<h5>{{message}}</h5>
{{/if}}






